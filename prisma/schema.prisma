// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  password       String
  role           Role      @default(EMPLOYEE)
  department     String?
  position       String?
  phoneNumber    String?
  profileImage   String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  accessCode     AccessCode? @relation(fields: [accessCodeId], references: [id])
  accessCodeId   String?
  sentMessages   Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatRooms      ChatRoomUser[]
  conferences    ConferenceUser[]
  newsItems      News[]
  comments       Comment[]
  documents      Document[]
  notifications  Notification[]
  readMessages   MessageRead[]
}

model AccessCode {
  id             String    @id @default(cuid())
  code           String    @unique
  isUsed         Boolean   @default(false)
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  createdBy      String
  users          User[]
}

model Message {
  id             String    @id @default(cuid())
  content        String
  attachments    String[]
  isRead         Boolean   @default(false) // For direct messages
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  sender         User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  recipient      User?     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId    String?   // Null for group messages
  chatRoom       ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId     String?

  // For tracking read status in group chats
  readBy         MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

model ChatRoom {
  id             String    @id @default(cuid())
  name           String?
  isGroup        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  messages       Message[]
  users          ChatRoomUser[]
}

model ChatRoomUser {
  chatRoom       ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId     String
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  isAdmin        Boolean   @default(false)
  joinedAt       DateTime  @default(now())

  @@id([chatRoomId, userId])
}

model Conference {
  id             String    @id @default(cuid())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime?
  recordingUrl   String?
  isActive       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  participants   ConferenceUser[]
}

model ConferenceUser {
  conference     Conference @relation(fields: [conferenceId], references: [id])
  conferenceId   String
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  isHost         Boolean   @default(false)
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?

  @@id([conferenceId, userId])
}

model News {
  id             String    @id @default(cuid())
  title          String
  content        String
  category       String
  importance     Importance @default(NORMAL)
  publishedAt    DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  author         User      @relation(fields: [authorId], references: [id])
  authorId       String
  comments       Comment[]
}

model Comment {
  id             String    @id @default(cuid())
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  author         User      @relation(fields: [authorId], references: [id])
  authorId       String
  news           News      @relation(fields: [newsId], references: [id])
  newsId         String
}

model Document {
  id             String    @id @default(cuid())
  title          String
  description    String?
  filename       String
  fileUrl        String
  fileSize       Int
  fileType       String
  category       String
  version        Int       @default(1)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  uploader       User      @relation(fields: [uploaderId], references: [id])
  uploaderId     String
  previousVersion Document? @relation("DocumentVersions", fields: [previousVersionId], references: [id])
  previousVersionId String? @unique
  nextVersion    Document? @relation("DocumentVersions")
}

model Notification {
  id             String    @id @default(cuid())
  title          String
  content        String
  type           NotificationType
  isRead         Boolean   @default(false)
  createdAt      DateTime  @default(now())

  // Relations
  user           User      @relation(fields: [userId], references: [id])
  userId         String
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum Importance {
  HIGH
  NORMAL
  LOW
}

enum NotificationType {
  SYSTEM
  MESSAGE
  NEWS
  DOCUMENT
  CONFERENCE
  USER
}
